{"version":3,"sources":["components/Navbar.js","components/Instructions.js","components/Game.js","components/Leaderboard.js","components/Winner.js","components/Loser.js","components/GameOver.js","components/Footer.js","App.js","index.js"],"names":["Navbar","Container","className","Row","Col","sm","href","target","rel","Instructions","id","md","Button","onClick","this","props","clickHandler","Component","Game","gameCountdown","state","isCorrect","timer","lg","Card","style","width","firstFood","attributes","image","Img","variant","src","alt","Body","Title","mostCalories","showCalories","calories","name","Text","restaurant","replace","secondFood","currentGame","score","Leaderboard","leaderboard","map","item","key","initials","toUpperCase","Winner","Form","Group","onSubmit","submitHandler","Control","type","value","maxLength","onChange","changeHandler","updateInitials","Loser","GameOver","playAgain","Footer","App","newGame","e","preventDefault","fetch","api","method","headers","Accept","body","JSON","stringify","game","then","res","json","data","setState","length","display","Array","from","games","sort","a","b","slice","interval","setInterval","clearInterval","newFoods","newFirstFood","Foods","Math","floor","random","filteredList","filter","foodItem","newSecondFood","newMostCalories","event","currentTarget","setTimeout","gameOver","logKey","newCurrentGame","newGamesArray","document","addEventListener","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f0344990.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst Navbar = () => (\n  <Container className=\"mt-5\">\n    <Row className=\"justify-content-sm-center\">\n      <Col sm=\"auto\">\n        <h5>\n          Fast Food Face-Off /{\" \"}\n          <a\n            href=\"https://github.com/superhackerboy/fast-food-face-off\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub\n          </a>\n        </h5>\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Instructions extends Component {\n  render() {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col sm=\"auto\">\n            <p id=\"small-text\">\n              - You may need to play at least 1 game to start the server -\n            </p>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col></Col>\n          <Col sm={10} md={8} className=\"mt-3 mb-3\">\n            <h4>ABOUT</h4>\n            <p>\n              You're looking at my first app! It was created with Ruby on Rails\n              and React while I was in school. Nokogiri was used to create three\n              web scrapers that scraped data from a nutrition site, Yahoo Image\n              search results, and for restaurant logos. Learn more by clicking\n              on the GitHub link above!\n            </p>\n            <h4>INSTRUCTIONS</h4>\n            <p>\n              You'll be shown two randomly selected fast foods. Your task is to\n              guess which one has the most calories. You get 1 point for each\n              correct guess. Your game is over once you make an incorrect guess.\n              Good luck!\n            </p>\n          </Col>\n          <Col></Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col sm=\"auto mb-5\">\n            <Button onClick={this.props.clickHandler}>START GAME</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Instructions;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\n\nclass Game extends Component {\n  componentDidMount() {\n    // begins countdown\n    this.props.gameCountdown();\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row className=\"justify-content-center mt-4 mb-4\">\n          <Col sm=\"auto\">\n            <h1 className=\"display-3\">\n              {this.props.state.isCorrect ? (\n                <h1 className=\"display-3\">CORRECT</h1>\n              ) : this.props.state.isCorrect === false ? (\n                <h1 className=\"display-3\">WRONG</h1>\n              ) : (\n                this.props.state.timer\n              )}\n            </h1>\n          </Col>\n        </Row>\n\n        <Row className=\"justify-content-center\">\n          <Col md={6} lg=\"auto\">\n            <Card\n              className=\"mb-4\"\n              onClick={this.props.clickHandler}\n              style={{ width: \"20rem\" }}\n              id={this.props.state.firstFood.attributes.image}\n            >\n              <Card.Img\n                variant=\"top\"\n                src={this.props.state.firstFood.attributes.image}\n                alt=\"fast food\"\n              />\n              <Card.Body>\n                <Card.Title\n                  className={\n                    this.props.state.mostCalories === this.props.state.firstFood\n                      ? this.props.state.showCalories\n                        ? \"correct\"\n                        : null\n                      : this.props.state.showCalories\n                      ? \"incorrect\"\n                      : null\n                  }\n                >\n                  {this.props.state.showCalories\n                    ? this.props.state.firstFood.attributes.calories\n                    : this.props.state.firstFood.attributes.name}{\" \"}\n                  Calories\n                </Card.Title>\n                <Card.Text>\n                  {this.props.state.firstFood.attributes.restaurant.replace(\n                    \"+\",\n                    \" \"\n                  )}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n\n          <Col md={6} lg=\"auto\">\n            <Card\n              onClick={this.props.clickHandler}\n              style={{ width: \"20rem\" }}\n              id={this.props.state.secondFood.attributes.image}\n            >\n              <Card.Img\n                variant=\"top\"\n                src={this.props.state.secondFood.attributes.image}\n                alt=\"fast food\"\n              />\n              <Card.Body>\n                <Card.Title\n                  className={\n                    this.props.state.mostCalories ===\n                    this.props.state.secondFood\n                      ? this.props.state.showCalories\n                        ? \"correct\"\n                        : null\n                      : this.props.state.showCalories\n                      ? \"incorrect\"\n                      : null\n                  }\n                >\n                  {this.props.state.showCalories\n                    ? this.props.state.secondFood.attributes.calories\n                    : this.props.state.secondFood.attributes.name}{\" \"}\n                  Calories\n                </Card.Title>\n                <Card.Text>\n                  {this.props.state.secondFood.attributes.restaurant.replace(\n                    \"+\",\n                    \" \"\n                  )}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col sm=\"auto mb-2\">\n            <h3 sm=\"mb-5\">\n              {this.props.state.currentGame.score === 1\n                ? \"KILLING SPREE\"\n                : null}\n              {this.props.state.currentGame.score === 2\n                ? \"KILLING FRENZY\"\n                : null}\n              {this.props.state.currentGame.score === 3 ? \"RUNNING RIOT\" : null}\n              {this.props.state.currentGame.score === 4 ? \"RAMPAGE\" : null}\n              {this.props.state.currentGame.score === 5 ? \"UNTOUCHABLE\" : null}\n              {this.props.state.currentGame.score === 6 ? \"INVINCIBLE\" : null}\n              {this.props.state.currentGame.score === 7\n                ? \"INCONVEIVABLE\"\n                : null}\n              {this.props.state.currentGame.score === 8\n                ? \"UNFRIGGENBELIEVEABLE\"\n                : null}\n              {this.props.state.currentGame.score >= 9 ? \"COMEBACK\" : null}\n            </h3>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Leaderboard extends Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <ol className=\"display-4\">\n              {this.props.leaderboard.map(item => {\n                return (\n                  <li key={item.id}>\n                    {item.attributes.initials.toUpperCase()}{\" \"}\n                    {item.attributes.score}\n                  </li>\n                );\n              })}\n            </ol>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Leaderboard;\n","import React, { Component } from \"react\";\nimport Leaderboard from \"./Leaderboard\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\n\nclass Winner extends Component {\n  render() {\n    return (\n      <Container>\n        <Row className=\"justify-content-center mt-4 mb-3\">\n          <Col sm=\"auto\">\n            <h1>\n              <b>GAME OVER</b>\n            </h1>\n            <p>Enter your initials, you winner.</p>\n          </Col>\n        </Row>\n\n        <Form>\n          <Row className=\"justify-content-center\">\n            <Col sm=\"auto\">\n              <Form.Group onSubmit={this.props.submitHandler}>\n                <Form.Control\n                  type=\"text\"\n                  value={this.props.currentGame.initials}\n                  maxLength=\"3\"\n                  onChange={this.props.changeHandler}\n                />\n              </Form.Group>\n            </Col>\n            <Col sm=\"auto\">\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                onClick={this.props.updateInitials}\n              >\n                Submit\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n\n        <Row className=\"justify-content-center\">\n          <Col sm=\"auto\">\n            <Leaderboard leaderboard={this.props.leaderboard} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Winner;\n","import React, { Component } from \"react\";\nimport Leaderboard from \"./Leaderboard\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Loser extends Component {\n  render() {\n    return (\n      <Container>\n        <Row className=\"justify-content-center mt-4 mb-3\">\n          <Col sm=\"auto\">\n            <h1>\n              <b>GAME OVER</b>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col sm=\"auto\">\n            <Leaderboard leaderboard={this.props.leaderboard} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Loser;\n","import React, { Component } from \"react\";\nimport Winner from \"./Winner\";\nimport Loser from \"./Loser\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\n\nclass GameOver extends Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {this.props.state.currentGame.score >\n            this.props.state.leaderboard[9].attributes.score ? (\n              <Winner\n                leaderboard={this.props.state.leaderboard}\n                currentGame={this.props.state.currentGame}\n                updateInitials={this.props.updateInitials}\n                changeHandler={this.props.changeHandler}\n              />\n            ) : (\n              <Loser leaderboard={this.props.state.leaderboard} />\n            )}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col sm=\"auto mb-5\">\n            <Button onClick={this.props.playAgain}>Play Again?</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default GameOver;\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst Footer = () => (\n  <Container className=\"fixed-bottom\">\n    <Row className=\"justify-content-center\">\n      <Col sm=\"auto\">\n        <p>\n          Created by{\" \"}\n          <a\n            href=\"https://www.linkedin.com/in/superhackerman/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Super Hacker Man\n          </a>\n        </p>\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Foods from \"./foods.json\";\nimport Navbar from \"./components/Navbar\";\nimport Instructions from \"./components/Instructions\";\nimport Game from \"./components/Game\";\nimport GameOver from \"./components/GameOver\";\nimport Footer from \"./components/Footer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const firstFood = Foods[Math.floor(Math.random() * Foods.length)];\n\n    const filteredList = Foods.filter(\n      foodItem => foodItem.attributes.calories !== firstFood.attributes.calories\n    );\n\n    const secondFood =\n      filteredList[Math.floor(Math.random() * filteredList.length)];\n\n    const mostCalories =\n      firstFood.attributes.calories > secondFood.attributes.calories\n        ? firstFood\n        : secondFood;\n\n    this.state = {\n      api: \"https://fast-food-face-off.herokuapp.com/games\",\n      leaderboard: null,\n      timer: 7,\n      isCorrect: null,\n      firstFood,\n      secondFood,\n      mostCalories,\n      showCalories: false,\n      games: null,\n      currentGame: {\n        id: null,\n        score: null,\n        initials: null\n      },\n      display: \"instructions\"\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.logKey);\n    // listens for left or right arrow press\n\n    fetch(this.state.api)\n      // retreives all Games played\n      .then(res => res.json())\n      .then(({ data }) =>\n        this.setState({\n          games: data\n        })\n      );\n  }\n\n  newGame = e => {\n    // starts new game\n    e.preventDefault();\n\n    fetch(this.state.api, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        game: {\n          score: 0,\n          initials: \"aaa\"\n        }\n      })\n    });\n\n    fetch(this.state.api)\n      // sets id in State\n      .then(res => res.json())\n      .then(\n        ({ data }) =>\n          this.setState({\n            currentGame: {\n              id: data.length,\n              score: 0,\n              initials: \"\"\n            }\n          }),\n        this.setState({\n          display: \"game on\"\n        })\n      );\n\n    let leaderboard = Array.from(this.state.games)\n      // gets current top 10 scores\n      .sort((a, b) => {\n        return b.attributes.score - a.attributes.score;\n      })\n      .slice(0, 10);\n\n    this.setState({\n      leaderboard\n    });\n  };\n\n  gameCountdown = () => {\n    const interval = setInterval(() => {\n      if (this.state.isCorrect === false) {\n        clearInterval(interval);\n      }\n\n      if (this.state.timer > 0) {\n        this.setState({\n          timer: this.state.timer - 1\n        });\n      }\n\n      if (this.state.timer === 0) {\n        this.setState({\n          display: \"game over\"\n        });\n        clearInterval(interval);\n      }\n    }, 1000);\n  };\n\n  newFoods = () => {\n    // randomizes new foods\n    this.setState({\n      timer: 7,\n      showCalories: false\n    });\n\n    const newFirstFood = Foods[Math.floor(Math.random() * Foods.length)];\n    const filteredList = Foods.filter(\n      foodItem =>\n        foodItem.attributes.calories !== newFirstFood.attributes.calories\n    );\n    const newSecondFood =\n      filteredList[Math.floor(Math.random() * filteredList.length)];\n    const newMostCalories =\n      newFirstFood.attributes.calories > newSecondFood.attributes.calories\n        ? newFirstFood\n        : newSecondFood;\n\n    this.setState({\n      firstFood: newFirstFood,\n      secondFood: newSecondFood,\n      mostCalories: newMostCalories\n    });\n  };\n\n  clickHandler = e => {\n    // game logic\n    const event = e.currentTarget.id;\n    this.setState({ showCalories: true });\n\n    if (event === this.state.mostCalories.attributes.image) {\n      this.setState({\n        isCorrect: true\n      });\n    } else {\n      this.setState({\n        isCorrect: false\n      });\n    }\n\n    this.setState({\n      timer: 7\n    });\n\n    setTimeout(() => {\n      if (event === this.state.mostCalories.attributes.image) {\n        this.setState({\n          currentGame: {\n            id: this.state.currentGame.id,\n            score: this.state.currentGame.score + 1,\n            initials: \"\"\n          }\n        });\n        this.setState({\n          isCorrect: null\n        });\n        this.newFoods();\n      } else {\n        this.setState({\n          isCorrect: null\n        });\n\n        this.gameOver();\n      }\n    }, 2000);\n  };\n\n  logKey = e => {\n    // captures left and right arrow key presses\n    if (e.key === \"ArrowLeft\") {\n      if (this.state.firstFood === this.state.mostCalories) {\n        this.setState({\n          currentGame: {\n            id: this.state.currentGame.id,\n            score: this.state.currentGame.score + 1,\n            initials: \"\"\n          }\n        });\n        this.newFoods();\n      } else {\n        this.gameOver();\n      }\n    }\n\n    if (e.key === \"ArrowRight\") {\n      if (this.state.secondFood === this.state.mostCalories) {\n        this.setState({\n          currentGame: {\n            id: this.state.currentGame.id,\n            score: this.state.currentGame.score + 1,\n            initials: \"\"\n          }\n        });\n        this.newFoods();\n      } else {\n        this.gameOver();\n      }\n    }\n  };\n\n  gameOver = () => {\n    this.setState({\n      display: \"game over\"\n    });\n  };\n\n  changeHandler = e => {\n    this.setState({\n      currentGame: {\n        id: this.state.currentGame.id,\n        score: this.state.currentGame.score,\n        initials: e.target.value\n      }\n    });\n  };\n\n  updateInitials = e => {\n    e.preventDefault();\n\n    fetch(`${this.state.api}/${this.state.currentGame.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        game: {\n          id: this.state.currentGame.id,\n          score: this.state.currentGame.score,\n          initials: this.state.currentGame.initials\n        }\n      })\n    });\n\n    const newCurrentGame = {\n      // makes currentGame same format as the rest of the games\n      id: this.state.currentGame.id,\n      attributes: {\n        score: this.state.currentGame.score,\n        initials: this.state.currentGame.initials\n      }\n    };\n\n    const newGamesArray = [...this.state.games, newCurrentGame];\n\n    let leaderboard = Array.from(newGamesArray)\n      // updates new leaderboard\n      .sort((a, b) => {\n        return b.attributes.score - a.attributes.score;\n      })\n      .slice(0, 10);\n\n    this.setState({\n      leaderboard\n    });\n\n    this.setState({\n      // clears input field\n      currentGame: {\n        id: this.state.currentGame.id,\n        score: this.state.currentGame.score,\n        initials: \"\"\n      }\n    });\n  };\n\n  playAgain = () => {\n    this.setState({\n      display: \"game on\",\n      timer: 7\n    });\n\n    this.newFoods();\n    this.setState({\n      currentGame: {\n        id: this.state.currentGame.id,\n        score: 0,\n        initials: this.state.currentGame.initials\n      }\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar />\n        {this.state.display === \"instructions\" ? (\n          <Instructions clickHandler={this.newGame} />\n        ) : null}\n\n        {this.state.display === \"game on\" ? (\n          <Game\n            state={this.state}\n            clickHandler={this.clickHandler}\n            gameCountdown={this.gameCountdown}\n          />\n        ) : null}\n\n        {this.state.display === \"game over\" && this.state.games ? (\n          <GameOver\n            state={this.state}\n            updateInitials={this.updateInitials}\n            changeHandler={this.changeHandler}\n            playAgain={this.playAgain}\n          />\n        ) : null}\n        <Footer />\n      </>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}